//
// Copyright (c) 2018,2019 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

[[release_notes_10]]
== Release Notes for MicroProfile Context Propagation 1.0

http://download.eclipse.org/microprofile/microprofile-context-propagation-1.0/microprofile-context-propagation.pdf[MicroProfile Context Propagation Spec PDF]
http://download.eclipse.org/microprofile/microprofile-context-propagation-1.0/microprofile-context-propagation.html[MicroProfile Context Propagation Spec HTML]
http://download.eclipse.org/microprofile/microprofile-context-propagation-1.0/apidocs/[MicroProfile Context Propagation Spec Javadocs]

Key features:

- `CompletableFuture`/`CompletionStage` implementations with predictable thread context and  using managed threads for async actions
- Ability to contextualize only specific actions/tasks
- Compatibility with EE Concurrency
- CDI injection as well as builder pattern
- Configurable via MicroProfile Config

To get started, add this dependency to your project:

[source,xml]
----
<dependency>
    <groupId>org.eclipse.microprofile.context-propagation</groupId>
    <artifactId>microprofile-context-propagation-api</artifactId>
    <version>1.0</version>
    <scope>provided</scope>
</dependency>
----

Use the fluent builder API to construct a `ManagedExecutor`:

[source,java]
----
    ManagedExecutor executor = ManagedExecutor.builder()
                       .propagated(ThreadContext.APPLICATION, ThreadContext.CDI)
                       .cleared(ThreadContext.ALL_REMAINING)
                       .maxAsync(5)
                       .build();
----

Then obtain a `CompletableFuture` or `CompletionStage` from the `ManagedExecutor`, and from there use it the same as Java SE:

[source,java]
----
    CompletableFuture<Integer> cf1 = executor.supplyAsync(supplier1)
                                             .thenApplyAsync(function1)
                                             .thenApply(function2);
----

Take care to shut down managed executors once the application no longer needs them:

[source,java]
----
    executor.shutdownNow();
----

Similarly, you can construct `ThreadContext` instances and use them to more granularly control thread propagation to individual stages:

[source,java]
----
    ThreadContext secContext = ManagedExecutor.builder()
                       .propagated(ThreadContext.SECURITY)
                       .cleared(ThreadContext.TRANSACTION)
                       .unchanged(ThreadContext.ALL_REMAINING)
                       .build();
    ...
    CompletableFuture<Void> stage2 = stage1.thenAccept(secContext.contextualConsumer(consumer1));
----